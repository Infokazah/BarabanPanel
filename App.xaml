<Application x:Class="BarabanPanel.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BarabanPanel"
             xmlns:Res="clr-namespace:BarabanPanel.Resources"
             xmlns:vm="clr-namespace:BarabanPanel.ViewModels"
             StartupUri="Views/Windows/MainWindow.xaml">
    <Application.Resources>
        <vm:ViewModelLocator x:Key="Locator"/>
        <SolidColorBrush x:Key="UnCompleteBrushBack" Color="#E98074"/>
        <SolidColorBrush x:Key="CompleteBrush" Color="#AFD275"/>
        <SolidColorBrush x:Key="UnCompleteBrushForeground" Color="#E85A4F"/>
        <SolidColorBrush x:Key="CompleteBrushForeground" Color="#14A76C"/>
        
        <SolidColorBrush x:Key="MainBrushBackground" Color="#FF393C4A"/>
        <SolidColorBrush x:Key="MainBrushBackgroundMouseOn" Color="#FF2F313C"/>
        <SolidColorBrush x:Key="MainBrushForeground" Color="White"/>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" x:Key="MainBackground">
            <GradientStop Color="#FF2D2926" Offset="0.004"/>
            <GradientStop Color="#FF3B3833" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TopPanelColor" Color="#FF21201E"/>
        <SolidColorBrush x:Key="ElementsBrush" Color="Transparent"/>
        <SolidColorBrush x:Key="BorderBrush" Color="#FF7D7761"/>
        <SolidColorBrush x:Key="MouseOverBrush" Color="#FF2F313C"/>
        <Style x:Key="CircleProgressBar" TargetType="{x:Type Res:CornerProgressBar}">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Res:CornerProgressBar}">
                        <Grid x:Name="TemplateRoot">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            </PointAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding Res:CornerProgressBar.CornerRadius}" />
                            <Rectangle x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="{TemplateBinding Res:CornerProgressBar.RectangleCornerRadius}" RadiusY="{TemplateBinding Res:CornerProgressBar.RectangleCornerRadius}" />
                                <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="{TemplateBinding Res:CornerProgressBar.RectangleCornerRadius}" RadiusY="{TemplateBinding Res:CornerProgressBar.RectangleCornerRadius}">
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Button">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ElementsBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="5"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource MouseOverBrush}"/>
                                <Setter Property="TextElement.Background" TargetName="contentPresenter" Value="{StaticResource MouseOverBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                <Setter Property="TextElement.Background" TargetName="contentPresenter" Value="{StaticResource BorderBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="TextBox" x:Key="StandartTextBox">
            <Setter Property="Background" Value="{StaticResource ElementsBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource MainBrushForeground}"/>
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="3"/>
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>
        <Style TargetType="StackPanel">
            <Setter Property="Background" Value="{StaticResource ElementsBrush}"/>
        </Style>
        <Style TargetType="Border" x:Key="StandartBorder">
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
            <Setter Property="CornerRadius" Value="5"/>
            <Setter Property="BorderThickness" Value="3"/>
            <Setter Property="Margin" Value="5"/>
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="Background" Value="{StaticResource ElementsBrush}"/>
        </Style>

        
    </Application.Resources>
</Application>
